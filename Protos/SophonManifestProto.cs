using Google.Protobuf;
using Google.Protobuf.Collections;
using Google.Protobuf.Reflection;
using System;

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SophonManifestProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981

namespace Hi3Helper.Sophon.Protos
{

    /// <summary>Holder for reflection information generated from SophonManifestProto.proto</summary>
    public static partial class SophonManifestProtoReflection
    {
        /// <summary>File descriptor for SophonManifestProto.proto</summary>
        public static FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static FileDescriptor descriptor;

        static SophonManifestProtoReflection()
        {
            byte[] descriptorData = Convert.FromBase64String(
                string.Concat(
                  "ChlTb3Bob3NNYW5pZmVzdFByb3RvLnByb3RvEhdIaTNIZWxwZXIuU29waG9z",
                  "LlByb3RvcyJNChNTb3Bob3NNYW5pZmVzdFByb3RvEjYKBkFzc2V0cxgBIAMo",
                  "CzImLkhpM0hlbHBlci5Tb3Bob3MuUHJvdG9zLkFzc2V0UHJvcGVydHkimAEK",
                  "DUFzc2V0UHJvcGVydHkSEQoJQXNzZXROYW1lGAEgASgJEjgKC0Fzc2V0Q2h1",
                  "bmtzGAIgAygLMiMuSGkzSGVscGVyLlNvcGhvcy5Qcm90b3MuQXNzZXRDaHVu",
                  "axIRCglBc3NldFR5cGUYAyABKAUSEQoJQXNzZXRTaXplGAQgASgDEhQKDEFz",
                  "c2V0SGFzaE1kNRgFIAEoCSKOAQoKQXNzZXRDaHVuaxIRCglDaHVua05hbWUY",
                  "ASABKAkSIAoYQ2h1bmtEZWNvbXByZXNzZWRIYXNoTWQ1GAIgASgJEhkKEUNo",
                  "dW5rT25GaWxlT2Zmc2V0GAMgASgDEhEKCUNodW5rU2l6ZRgEIAEoAxIdChVD",
                  "aHVua1NpemVEZWNvbXByZXNzZWQYBSABKANiBnByb3RvMw=="));
            descriptor = FileDescriptor.FromGeneratedCode(descriptorData,
                new FileDescriptor[] { },
                new GeneratedClrTypeInfo(null, null, new GeneratedClrTypeInfo[] {
            new GeneratedClrTypeInfo(typeof(SophonManifestProto), SophonManifestProto.Parser, new[]{ "Assets" }, null, null, null, null),
            new GeneratedClrTypeInfo(typeof(AssetProperty), AssetProperty.Parser, new[]{ "AssetName", "AssetChunks", "AssetType", "AssetSize", "AssetHashMd5" }, null, null, null, null),
            new GeneratedClrTypeInfo(typeof(AssetChunk), AssetChunk.Parser, new[]{ "ChunkName", "ChunkDecompressedHashMd5", "ChunkOnFileOffset", "ChunkSize", "ChunkSizeDecompressed" }, null, null, null, null)
                }));
        }
    }

    public sealed partial class SophonManifestProto : IMessage<SophonManifestProto>, IBufferMessage
    {
        private static readonly MessageParser<SophonManifestProto> _parser = new MessageParser<SophonManifestProto>(() => new SophonManifestProto());
        private UnknownFieldSet? _unknownFields;

        public static MessageParser<SophonManifestProto> Parser { get { return _parser; } }

        public static MessageDescriptor Descriptor
        {
            get { return SophonManifestProtoReflection.Descriptor.MessageTypes[0]; }
        }

        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        public SophonManifestProto()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        public SophonManifestProto(SophonManifestProto other) : this()
        {
            assets_ = other.assets_.Clone();
            _unknownFields = UnknownFieldSet.Clone(other._unknownFields);
        }

        public SophonManifestProto Clone()
        {
            return new SophonManifestProto(this);
        }

        /// <summary>Field number for the "Assets" field.</summary>
        public const int AssetsFieldNumber = 1;
        private static readonly FieldCodec<AssetProperty> _repeated_assets_codec
            = FieldCodec.ForMessage(10, AssetProperty.Parser);
        private readonly RepeatedField<AssetProperty> assets_ = new RepeatedField<AssetProperty>();

        public RepeatedField<AssetProperty> Assets
        {
            get { return assets_; }
        }

        public override bool Equals(object? other)
        {
            return Equals(other as SophonManifestProto);
        }

        public bool Equals(SophonManifestProto? other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!assets_.Equals(other.assets_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= assets_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext output)
        {
            assets_.WriteTo(ref output, _repeated_assets_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += assets_.CalculateSize(_repeated_assets_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        public void MergeFrom(SophonManifestProto other)
        {
            if (other == null)
            {
                return;
            }
            assets_.Add(other.assets_);
            _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            assets_.AddEntriesFrom(ref input, _repeated_assets_codec);
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class AssetProperty : IMessage<AssetProperty>, IBufferMessage
    {
        private static readonly MessageParser<AssetProperty> _parser = new MessageParser<AssetProperty>(() => new AssetProperty());
        private UnknownFieldSet? _unknownFields;

        public static MessageParser<AssetProperty> Parser { get { return _parser; } }

        public static MessageDescriptor Descriptor
        {
            get { return SophonManifestProtoReflection.Descriptor.MessageTypes[1]; }
        }

        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        public AssetProperty()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        public AssetProperty(AssetProperty other) : this()
        {
            assetName_ = other.assetName_;
            assetChunks_ = other.assetChunks_.Clone();
            assetType_ = other.assetType_;
            assetSize_ = other.assetSize_;
            assetHashMd5_ = other.assetHashMd5_;
            _unknownFields = UnknownFieldSet.Clone(other._unknownFields);
        }

        public AssetProperty Clone()
        {
            return new AssetProperty(this);
        }

        /// <summary>Field number for the "AssetName" field.</summary>
        public const int AssetNameFieldNumber = 1;
        private string assetName_ = "";

        public string AssetName
        {
            get { return assetName_; }
            set
            {
                assetName_ = ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "AssetChunks" field.</summary>
        public const int AssetChunksFieldNumber = 2;
        private static readonly FieldCodec<AssetChunk> _repeated_assetChunks_codec
            = FieldCodec.ForMessage(18, AssetChunk.Parser);
        private readonly RepeatedField<AssetChunk> assetChunks_ = new RepeatedField<AssetChunk>();

        public RepeatedField<AssetChunk> AssetChunks
        {
            get { return assetChunks_; }
        }

        /// <summary>Field number for the "AssetType" field.</summary>
        public const int AssetTypeFieldNumber = 3;
        private int assetType_;

        public int AssetType
        {
            get { return assetType_; }
            set
            {
                assetType_ = value;
            }
        }

        /// <summary>Field number for the "AssetSize" field.</summary>
        public const int AssetSizeFieldNumber = 4;
        private long assetSize_;

        public long AssetSize
        {
            get { return assetSize_; }
            set
            {
                assetSize_ = value;
            }
        }

        /// <summary>Field number for the "AssetHashMd5" field.</summary>
        public const int AssetHashMd5FieldNumber = 5;
        private string assetHashMd5_ = "";

        public string AssetHashMd5
        {
            get { return assetHashMd5_; }
            set
            {
                assetHashMd5_ = ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        public override bool Equals(object? other)
        {
            return Equals(other as AssetProperty);
        }

        public bool Equals(AssetProperty? other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (AssetName != other.AssetName) return false;
            if (!assetChunks_.Equals(other.assetChunks_)) return false;
            if (AssetType != other.AssetType) return false;
            if (AssetSize != other.AssetSize) return false;
            if (AssetHashMd5 != other.AssetHashMd5) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
            hash ^= assetChunks_.GetHashCode();
            if (AssetType != 0) hash ^= AssetType.GetHashCode();
            if (AssetSize != 0L) hash ^= AssetSize.GetHashCode();
            if (AssetHashMd5.Length != 0) hash ^= AssetHashMd5.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext output)
        {
            if (AssetName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(AssetName);
            }
            assetChunks_.WriteTo(ref output, _repeated_assetChunks_codec);
            if (AssetType != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(AssetType);
            }
            if (AssetSize != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(AssetSize);
            }
            if (AssetHashMd5.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(AssetHashMd5);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (AssetName.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeStringSize(AssetName);
            }
            size += assetChunks_.CalculateSize(_repeated_assetChunks_codec);
            if (AssetType != 0)
            {
                size += 1 + CodedOutputStream.ComputeInt32Size(AssetType);
            }
            if (AssetSize != 0L)
            {
                size += 1 + CodedOutputStream.ComputeInt64Size(AssetSize);
            }
            if (AssetHashMd5.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeStringSize(AssetHashMd5);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        public void MergeFrom(AssetProperty other)
        {
            if (other == null)
            {
                return;
            }
            if (other.AssetName.Length != 0)
            {
                AssetName = other.AssetName;
            }
            assetChunks_.Add(other.assetChunks_);
            if (other.AssetType != 0)
            {
                AssetType = other.AssetType;
            }
            if (other.AssetSize != 0L)
            {
                AssetSize = other.AssetSize;
            }
            if (other.AssetHashMd5.Length != 0)
            {
                AssetHashMd5 = other.AssetHashMd5;
            }
            _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            AssetName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            assetChunks_.AddEntriesFrom(ref input, _repeated_assetChunks_codec);
                            break;
                        }
                    case 24:
                        {
                            AssetType = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            AssetSize = input.ReadInt64();
                            break;
                        }
                    case 42:
                        {
                            AssetHashMd5 = input.ReadString();
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class AssetChunk : IMessage<AssetChunk>, IBufferMessage
    {
        private static readonly MessageParser<AssetChunk> _parser = new MessageParser<AssetChunk>(() => new AssetChunk());
        private UnknownFieldSet? _unknownFields;

        public static MessageParser<AssetChunk> Parser { get { return _parser; } }

        public static MessageDescriptor Descriptor
        {
            get { return SophonManifestProtoReflection.Descriptor.MessageTypes[2]; }
        }

        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        public AssetChunk()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        public AssetChunk(AssetChunk other) : this()
        {
            chunkName_ = other.chunkName_;
            chunkDecompressedHashMd5_ = other.chunkDecompressedHashMd5_;
            chunkOnFileOffset_ = other.chunkOnFileOffset_;
            chunkSize_ = other.chunkSize_;
            chunkSizeDecompressed_ = other.chunkSizeDecompressed_;
            _unknownFields = UnknownFieldSet.Clone(other._unknownFields);
        }

        public AssetChunk Clone()
        {
            return new AssetChunk(this);
        }

        /// <summary>Field number for the "ChunkName" field.</summary>
        public const int ChunkNameFieldNumber = 1;
        private string chunkName_ = "";

        public string ChunkName
        {
            get { return chunkName_; }
            set
            {
                chunkName_ = ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ChunkDecompressedHashMd5" field.</summary>
        public const int ChunkDecompressedHashMd5FieldNumber = 2;
        private string chunkDecompressedHashMd5_ = "";

        public string ChunkDecompressedHashMd5
        {
            get { return chunkDecompressedHashMd5_; }
            set
            {
                chunkDecompressedHashMd5_ = ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ChunkOnFileOffset" field.</summary>
        public const int ChunkOnFileOffsetFieldNumber = 3;
        private long chunkOnFileOffset_;

        public long ChunkOnFileOffset
        {
            get { return chunkOnFileOffset_; }
            set
            {
                chunkOnFileOffset_ = value;
            }
        }

        /// <summary>Field number for the "ChunkSize" field.</summary>
        public const int ChunkSizeFieldNumber = 4;
        private long chunkSize_;

        public long ChunkSize
        {
            get { return chunkSize_; }
            set
            {
                chunkSize_ = value;
            }
        }

        /// <summary>Field number for the "ChunkSizeDecompressed" field.</summary>
        public const int ChunkSizeDecompressedFieldNumber = 5;
        private long chunkSizeDecompressed_;

        public long ChunkSizeDecompressed
        {
            get { return chunkSizeDecompressed_; }
            set
            {
                chunkSizeDecompressed_ = value;
            }
        }

        public override bool Equals(object? other)
        {
            return Equals(other as AssetChunk);
        }

        public bool Equals(AssetChunk? other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ChunkName != other.ChunkName) return false;
            if (ChunkDecompressedHashMd5 != other.ChunkDecompressedHashMd5) return false;
            if (ChunkOnFileOffset != other.ChunkOnFileOffset) return false;
            if (ChunkSize != other.ChunkSize) return false;
            if (ChunkSizeDecompressed != other.ChunkSizeDecompressed) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (ChunkName.Length != 0) hash ^= ChunkName.GetHashCode();
            if (ChunkDecompressedHashMd5.Length != 0) hash ^= ChunkDecompressedHashMd5.GetHashCode();
            if (ChunkOnFileOffset != 0L) hash ^= ChunkOnFileOffset.GetHashCode();
            if (ChunkSize != 0L) hash ^= ChunkSize.GetHashCode();
            if (ChunkSizeDecompressed != 0L) hash ^= ChunkSizeDecompressed.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext output)
        {
            if (ChunkName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ChunkName);
            }
            if (ChunkDecompressedHashMd5.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ChunkDecompressedHashMd5);
            }
            if (ChunkOnFileOffset != 0L)
            {
                output.WriteRawTag(24);
                output.WriteInt64(ChunkOnFileOffset);
            }
            if (ChunkSize != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(ChunkSize);
            }
            if (ChunkSizeDecompressed != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(ChunkSizeDecompressed);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (ChunkName.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeStringSize(ChunkName);
            }
            if (ChunkDecompressedHashMd5.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeStringSize(ChunkDecompressedHashMd5);
            }
            if (ChunkOnFileOffset != 0L)
            {
                size += 1 + CodedOutputStream.ComputeInt64Size(ChunkOnFileOffset);
            }
            if (ChunkSize != 0L)
            {
                size += 1 + CodedOutputStream.ComputeInt64Size(ChunkSize);
            }
            if (ChunkSizeDecompressed != 0L)
            {
                size += 1 + CodedOutputStream.ComputeInt64Size(ChunkSizeDecompressed);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        public void MergeFrom(AssetChunk other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ChunkName.Length != 0)
            {
                ChunkName = other.ChunkName;
            }
            if (other.ChunkDecompressedHashMd5.Length != 0)
            {
                ChunkDecompressedHashMd5 = other.ChunkDecompressedHashMd5;
            }
            if (other.ChunkOnFileOffset != 0L)
            {
                ChunkOnFileOffset = other.ChunkOnFileOffset;
            }
            if (other.ChunkSize != 0L)
            {
                ChunkSize = other.ChunkSize;
            }
            if (other.ChunkSizeDecompressed != 0L)
            {
                ChunkSizeDecompressed = other.ChunkSizeDecompressed;
            }
            _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            ChunkName = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ChunkDecompressedHashMd5 = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            ChunkOnFileOffset = input.ReadInt64();
                            break;
                        }
                    case 32:
                        {
                            ChunkSize = input.ReadInt64();
                            break;
                        }
                    case 40:
                        {
                            ChunkSizeDecompressed = input.ReadInt64();
                            break;
                        }
                }
            }
        }
    }
}
